/*
 * stm32f4xx_spi_driver.c
 */

#include "stm32f407xx_spi_driver.h"
/*
 *  Peripheral clock setup
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
	if (EnorDi == ENABLE){
			if (pSPIx == SPI1)
				SPI1_PCLK_EN();
			else if (pSPIx == SPI2)
				SPI2_PCLK_EN();
			else if (pSPIx == SPI3)
				SPI3_PCLK_EN();
			else if (pSPIx == SPI4)
				SPI4_PCLK_EN();
		}
		else {
			if (pSPIx == SPI1)
						SPI1_PCLK_DI();
					else if (pSPIx == SPI2)
						SPI2_PCLK_DI();
					else if (pSPIx == SPI3)
						SPI3_PCLK_DI();
					else if (pSPIx == SPI4)
						SPI4_PCLK_DI();
		}
}

/*
 *  Initialize and De-initialize
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
	uint32_t tempreg = 0;

	// configure the SPI mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;

	// configure the bus config
	if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
		// BIDI mode should be cleared
		tempreg &= ~(1 << 15);
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
		// BIDI mode should be set
		tempreg |= (1 << 15);
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
		// BIDI mode should be cleared and RXONLY set
		tempreg &= ~(1 << 15);
		tempreg |= (1 << 10);
	}

	// configure the SPI serial clock speed ( baud rate )
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << 3;

	// configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << 11;

	// configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << 1;

	// configure the CPHA
		tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << 0;

		pSPIHandle->pSPIx->CR1 = tempreg;

}
void SPI_DeInit(SPI_RegDef_t *pSPIx);

/*
 * Data send and receive
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len);
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len);

/*
 *  IRQ configuration and ISR handling
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi);
void SPI_IRQPRiorityConfig(uint8_t IRQNumber, uint32_t IRQPriority);
void SPI_IRQHandling(SPI_Handle_t *pHandle);

