/*
 * stm32f407xx_i2c_driver.c
 */
#include "stm32f407xx_i2c_driver.h"

uint16_t AHB_PreScaller[8] = { 2, 4, 8, 16, 64, 128, 256, 512 };
uint8_t APB1_PreScaller[4] = { 2, 4, 8, 16 };

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx);
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START );
}

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP );
}
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
	SlaveAddr = SlaveAddr << 1;
	SlaveAddr &= ~(1); // SlaveAddr is slave address + r/w bit
	pI2Cx->DR = SlaveAddr;
}

static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx)
{
	uint32_t dummyRead = pI2Cx->SR1;
	dummyRead = pI2Cx->SR2;
	(void)dummyRead;
}

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
	if (EnorDi == ENABLE) {
		pI2Cx->CR1 |= ( 1 << I2C_CR1_PE );
	}
	else {
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_PE );
	}
}

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
	if ( EnorDi == ENABLE ) {
		if ( pI2Cx == I2C1) {
			I2C1_PCLK_EN();
		}
		else if ( pI2Cx == I2C2) {
			I2C2_PCLK_EN();
		}
		else if ( pI2Cx == I2C3) {
			I2C3_PCLK_EN();
		}
	}
	else {
		if (pI2Cx == I2C1)
			I2C1_PCLK_DI();
		else if (pI2Cx == I2C2)
			I2C2_PCLK_DI();
		else if (pI2Cx == I2C3)
			I2C3_PCLK_DI();
	}
}
uint32_t RCC_GetPLLOutputClock()
{
	return 0;
}



uint32_t RCC_GetPCLK1Value (void)
{
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = ( ( RCC->CFGR >> 2 ) & 0x3 );

	if ( clksrc == 0 ) {
		SystemClk = 16000000;
	}
	else if ( clksrc == 1 ) {
		SystemClk = 8000000;
	}
	else if ( clksrc == 2 ) {
		SystemClk = RCC_GetPLLOutputClock();
	}

	// for ahbp
	temp = ( ( RCC->CFGR >> 4 ) & 0xF );

	if ( temp < 8 ) {
		ahbp = 1;
	}
	else {
		ahbp = AHB_PreScaller[temp - 8];
	}

	// for apb1
	temp = ( ( RCC->CFGR >> 10 ) & 0x7 );

	if ( temp < 4 ) {
		apb1p = 1;
	}
	else {
		apb1p = APB1_PreScaller[temp - 4];
	}

	pclk1 = (SystemClk / ahbp) / apb1p;

	return pclk1;
}

/*
 *  Initialize and de-initialize the I2Cx peripheral
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
	uint32_t tempreg = 0;

	// ack control bit
	tempreg |= ( pI2CHandle->I2C_Config.I2C_AckControl << 10 );
	pI2CHandle->pI2Cx->CR1 = tempreg;

	// configure the FREQ field of CR2
	tempreg = 0;
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
	pI2CHandle->pI2Cx->CR2 |= ( tempreg & 0x3F );

	// program the device address
	tempreg = 0;
	tempreg |= ( pI2CHandle->I2C_Config.I2C_DeviceAddress << 1 );
	tempreg |= ( 1 << 14 ); // keep 14th bit 1 always according to reference manual
	pI2CHandle->pI2Cx->OAR1 = tempreg;

	// CCR calculations
	uint16_t ccr_value = 0;
	tempreg = 0;
	if ( pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM ) {
		// mode is standard mode
		ccr_value = RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed );
		tempreg |= ( ccr_value & 0xFFF );
	}
	else {
		// fast mode
		tempreg |= ( 1 << 15 );
		tempreg |= ( pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14 );
		if ( pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2 ) {
			ccr_value = RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed );
		}
		else {
			ccr_value = RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed );
		}
		tempreg |= ( ccr_value & 0xFFF );
	}
	pI2CHandle->pI2Cx->CCR = tempreg;

	// TRISE configuration
	if ( pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM ) {
		// mode is standard mode
		tempreg = ( RCC_GetPCLK1Value() / 1000000U ) + 1 ;
	}
	else {
		// fast mode
		tempreg = ( ( RCC_GetPCLK1Value() * 300 ) / 1000000000U ) + 1 ;
	}
	pI2CHandle->pI2Cx->TRISE = ( tempreg & 0x3F );

}
void I2C_DeInit(I2C_RegDef_t *pI2Cx);

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
	if (pI2Cx->SR1 & FlagName)
		return FLAG_SET;

	return FLAG_RESET;
}

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr)
{
	// generate START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);

	//confirm that start generation is completed by checking the SB flag in SR1
	// until SB is cleared SCL pulled to low ( stretched )
	while (  !	I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB ) );

	// send the address of the slave with r/w bit set to w(0) total 8 bits
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr);

	// confirm that address phase is completed by checking the ADDR flag in the SR1
	while (  !	I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR ) );

	// clear the ADDR flag according to its software sequence
	// until ADDR is cleared SCL pulled to low ( stretched )
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);

	// send data until length becomes zero
	while ( Len > 0 ) {
		while (   !	I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
		pTxBuffer++;
		Len--;
	}

	// when len = 0 wait for TxE = 1 and BTF = 1 before generating stop condition
	// TxE = 1, BTF = 1 means both SR and DR are empty and next transmission should begin
	// when BTF = 1 SCL pulled to low ( stretched )
	while (   !	I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
	while (   !	I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));

	// generate STOP condition
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
}


