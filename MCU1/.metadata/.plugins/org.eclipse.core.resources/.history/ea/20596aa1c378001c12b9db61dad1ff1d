/*
 * stm32f4xx_spi_driver.c
 */

#include "stm32f407xx_spi_driver.h"
/*
 *  Peripheral clock setup
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
	if (EnorDi == ENABLE){
			if (pSPIx == SPI1)
				SPI1_PCLK_EN();
			else if (pSPIx == SPI2)
				SPI2_PCLK_EN();
			else if (pSPIx == SPI3)
				SPI3_PCLK_EN();
			else if (pSPIx == SPI4)
				SPI4_PCLK_EN();
		}
		else {
			if (pSPIx == SPI1)
						SPI1_PCLK_DI();
					else if (pSPIx == SPI2)
						SPI2_PCLK_DI();
					else if (pSPIx == SPI3)
						SPI3_PCLK_DI();
					else if (pSPIx == SPI4)
						SPI4_PCLK_DI();
		}
}

/*
 *  Initialize and De-initialize
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
	uint32_t tempreg = 0;

	// enable SPI clock peripheral
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);

	// configure the SPI mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;

	// configure the bus config
	if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
		// BIDI mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
		// BIDI mode should be set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
		// BIDI mode should be cleared and RXONLY set
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
		tempreg |= (1 << SPI_CR1_RXONLY);
	}

	// configure the SPI serial clock speed ( baud rate )
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;

	// configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;

	// configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;

	// configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;

	pSPIHandle->pSPIx->CR1 = tempreg;

}
void SPI_DeInit(SPI_RegDef_t *pSPIx);


uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
	if (pSPIx->SR & FlagName)
		return FLAG_SET;

	return FLAG_RESET;
}

/*
 * Data send and receive
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
	while (Len > 0)
	{
		// wait until TXE is set
		while ( SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET );

		// check DFF
		if (	(pSPIx->CR1 & ( 1 << SPI_CR1_DFF))	)
		{
			// 16 bit DFF	// load the data in to the DR
			pSPIx->DR |= *((uint16_t *)pTxBuffer );
			Len--;
			Len--;
			(uint16_t *)pTxBuffer++;
		}
		else
		{
			// 8 bit DFF
			pSPIx->DR |= *pTxBuffer;
			Len--;
			pTxBuffer++;
		}
	}
}

void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
	while (Len > 0)
	{
		// wait until RXNE is set
		while ( SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET );

		// check DFF
		if (	(pSPIx->CR1 & ( 1 << SPI_CR1_DFF))	)
		{
			// 16 bit DFF	// load the data from DR to RxBuffer address
			*((uint16_t *)pRxBuffer ) = pSPIx->DR;
			Len--;
			Len--;
			(uint16_t *)pRxBuffer++;
		}
		else
		{
			// 8 bit DFF
			*(pRxBuffer ) = pSPIx->DR;
			Len--;
			pRxBuffer++;
		}
	}
}


void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
	if (EnorDi == ENABLE) {
		pSPIx->CR1 |= ( 1 << SPI_CR1_SPE);
	}
	else
		pSPIx->CR1 &= ~( 1 << SPI_CR1_SPE);
}

void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
	if (EnorDi == ENABLE) {
		pSPIx->CR1 |= ( 1 << SPI_CR1_SSI);
	}
	else
		pSPIx->CR1 &= ~( 1 << SPI_CR1_SSI);
}
/*
 *  IRQ configuration and ISR handling
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
	if (EnorDi == ENABLE){
		if (IRQNumber <= 31){
			*NVIC_ISER0 |= ( 1 << IRQNumber);
		}
		else if (IRQNumber > 31 && IRQNumber < 64){
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32));
		}
		else if (IRQNumber >= 64 && IRQNumber < 96) {
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64));
		}
	}
	else {
		if (IRQNumber <= 31){
			*NVIC_ICER0 |= ( 1 << IRQNumber);
		}
		else if (IRQNumber > 31 && IRQNumber < 64){
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32));
		}
		else if (IRQNumber >= 64 && IRQNumber < 96){
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64));
		}
	}
}
void SPI_IRQPRiorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
	uint8_t iprx = IRQNumber / 4;
	uint8_t iprx_section = IRQNumber % 4;

	uint8_t shift_amount = ( 8 * iprx_section) +( 8 - NO_PR_BITS_IMPLEMENTED);
	*(NVIC_PR_BASE_ADDR +  iprx) |= ( IRQPriority << shift_amount );

}

void SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Len)
{
	// Save the TxBuffer address and Len information in global variables
	pSPIHandle->pTxBuffer = pTxBuffer;



}
void SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len);
void SPI_IRQHandling(SPI_Handle_t *pHandle);

